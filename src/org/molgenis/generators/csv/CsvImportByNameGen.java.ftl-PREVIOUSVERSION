<#--helper functions-->
<#include "GeneratorHelper.ftl">

<#--#####################################################################-->
<#--                                                                   ##-->
<#--         START OF THE OUTPUT                                       ##-->
<#--                                                                   ##-->
<#--#####################################################################-->
/* Date:        ${date}
 * 
 * generator:   ${generator} ${version}
 *
 * 
 * THIS FILE HAS BEEN GENERATED, PLEASE DO NOT EDIT!
 */

package ${package};

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.HashMap;

import org.apache.log4j.Logger;
import org.molgenis.framework.Database;
import org.molgenis.framework.data.DatabaseException;
import org.molgenis.util.Tuple;
import org.molgenis.util.CsvReader;
import org.molgenis.util.csv.CsvFileReader;
import org.molgenis.util.csv.CsvReaderListener;

import ${model.getName()}.data.types.*;

public class CsvImportByName
{
	static int BATCH_SIZE = 10000;
	static Logger logger = Logger.getLogger(CsvImport.class.getSimpleName());
	
	/**wrapper to use int inside anonymous classes (requires final, so cannot update directly)*/
	//FIXME move to value type elsewhere?
	public static class IntegerWrapper
	{
		private int value;
		
		public IntegerWrapper(int value)
		{
			this.value = value;
		}
		public void set(int value)
		{
			this.value = value;
		}
		public int get()
		{
			return this.value;
		}
	}

	/**
	 * Csv import of whole database.
	 * TODO: add filter parameters...
	 */
	public static void importAll(File directory, Database db, Tuple defaults) throws Exception
	{
		boolean withTransaction = !db.inTx();
		try
		{
			if(withTransaction) db.beginTx();
						
			<#list entities as entity><#if !entity.abstract>
			import${Name(entity)}(db, new File(directory + "/${entity.name?lower_case}.txt"), defaults);
			</#if></#list>			
			
			// insert back again...
			logger.debug("commiting transactions...");
			
			if(withTransaction) db.commitTx();
		}
		catch (Exception e)
		{
			logger.error("import failed: " + e.getMessage());
			logger.debug("rolling back transactions...");
			if(withTransaction) db.rollbackTx();

			throw e;
		}
	}
	
	public static ImportResult importAll(File directory, Database db, Tuple defaults, List<String> components) throws Exception {
		ImportResult result = new ImportResult();

<#list entities as entity><#if !entity.abstract>
		if (result.getErrorItem().equals("no error found") && components.contains("${entity.name?lower_case}")) {
			db.beginTx();
			try {
				String outcome = import${Name(entity)}(db, new File(directory + "/${entity.name?lower_case}.txt"), defaults);
				result.getProgressLog().add("${entity.name?lower_case}");
				result.getMessages().put("${entity.name?lower_case}", outcome);
				db.commitTx();
			} catch (Exception e) {
				result.setErrorItem("${entity.name?lower_case}");
				result.getMessages().put("${entity.name?lower_case}", e.getMessage() != null ? e.getMessage() : "null");
				db.rollbackTx();
			}
		}
</#if></#list>
		
		return result;
			
	}
<#list entities as entity><#if !entity.abstract>	
	/**
	 * Imports ${Name(entity)} from tab/comma delimited File.
	 * @param ${name(entity)}File a tab delimited file with ${Name(entity)} data.
	 */
	private static String import${Name(entity)}(final Database db, File ${name(entity)}File, final Tuple defaults)	throws DatabaseException, IOException, Exception 
	{
		if(	${name(entity)}File.exists() )
		{
			logger.info("trying to import "+${name(entity)}File);
			CsvReader reader = new CsvFileReader(${name(entity)}File); 
			
			//cache for imported objects
			final List<${Name(entity)}> ${name(entity)}List = new ArrayList<${Name(entity)}>(BATCH_SIZE);
			<#assign has_xrefs=false />
			<#list allFields(entity) as f><#if (f.type == 'xref' || f.type='mref') && f.getXRefLabelString() != f.getXRefField()><#assign has_xrefs=true />
			//foreign key map for field '${name(f)}' (${name(f.getXRefEntity())}.${name(f.getXRefLabelString())} -> ${name(f.getXRefEntity())}.${name(f.getXRefField())})			
			final Map<String,Integer> ${name(f)}Keymap = new TreeMap<String,Integer>();
			</#if></#list>
			final IntegerWrapper total = new IntegerWrapper(0);
			reader.parse(new CsvReaderListener()
			{
				public void handleLine(int LineNo, Tuple tuple) throws Exception
				{
					//parse object
					${Name(entity)} object = new ${Name(entity)}();
					object.set(tuple, false);
					object.set(defaults, false); 
					//only override values that have been set.
					${name(entity)}List.add(object);
					<#list allFields(entity) as f>
					<#if (f.type == 'xref' || f.type='mref') && f.getXRefLabelString() != f.getXRefField()>
					//foreign key '${name(f)}' (${name(f.getXRefEntity())}.${name(f.getXRefLabelString())} -> ?)
					<#if f.type='xref'>
					if(object.get${Name(f)}Label() != null) ${name(f)}Keymap.put(object.get${Name(f)}Label(), null);
					<#elseif f.type='mref'>
					if(object.get${Name(f)}Labels() != null) 
					{
						for(String s: object.get${Name(f)}Labels())
						{
							${name(f)}Keymap.put(s, null);
						}
					}
					</#if></#if></#list>					
					
					//add in batches
					if(${name(entity)}List.size() == BATCH_SIZE)
					{
						<#if has_xrefs>
						<#list allFields(entity) as f><#if (f.type == 'xref' || f.type == 'mref') && f.getXRefLabelString() != f.getXRefField()>
						//resolve foreign key '${name(f)}' (${name(f.getXRefEntity())}.${name(f.getXRefLabelString())} -> ${name(f.getXRefEntity())}.${name(f.getXRefField())})
						List<${Name(f.XRefEntity)}> ${name(f)}List = db.query(${Name(f.getXRefEntity())}.class).in("${f.getXRefLabelString()}",new ArrayList<Object>(${name(f)}Keymap.keySet())).find();
						for(${Name(f.XRefEntity)} xref :  ${name(f)}List)
						{
							${name(f)}Keymap.put(xref.get${Name(f.getXRefLabelString())}(), xref.get${Name(f.getXRefField())}());
						}
						
						</#if></#list>
						
						//update objects with foreign keys
						for(${Name(entity)} o:  ${name(entity)}List)
						{
							<#list allFields(entity) as f>
							<#if f.type == 'xref'  && f.getXRefLabelString() != f.getXRefField()>
							if(o.get${Name(f)}Label() != null) 
							{
								if(${name(f)}Keymap.get(o.get${Name(f)}Label()) == null) throw new Exception("Cannot find ${Name(f.getXRefEntity())} for ${name(f)}_${name(f.getXRefLabelString())} '"+o.get${Name(f)}Label()+"'");
								o.set${Name(f)}(${name(f)}Keymap.get(o.get${Name(f)}Label()));
							}
							</#if>
							<#if f.type == 'mref'  && f.getXRefLabelString() != f.getXRefField()>
							if(o.get${Name(f)}Labels() != null) 
							{
								for(String label: o.get${Name(f)}Labels())
								{
									if(${name(f)}Keymap.get(label) == null) throw new Exception("Cannot find ${Name(f.getXRefEntity())} for ${name(f)}_${name(f.getXRefLabelString())} '"+label+"'");
									o.get${Name(f)}().add(${name(f)}Keymap.get(label));
								}
							}							
							</#if>
							</#list>								
						}
						
						</#if>
						//add objects to the database
						db.add(${name(entity)}List);
						
						//clear for next batch						
						${name(entity)}List.clear();
						<#list allFields(entity) as f><#if (f.type == 'xref' || f.type='mref') && f.getXRefLabelString() != f.getXRefField()>
						${name(f)}Keymap.clear();
						</#if></#list>			
						
						//keep count
						total.set(total.get() + BATCH_SIZE);				
					}
				}
			});	
			<#if has_xrefs>
			<#list allFields(entity) as f><#if f.type == 'xref'  && f.getXRefLabelString() != f.getXRefField()>
			//resolve remaining foreign key '${name(f)}' (${name(f.getXRefEntity())}.${name(f.getXRefLabelString())} -> ${name(f.getXRefEntity())}.${name(f.getXRefField())})
			List<${Name(f.XRefEntity)}> ${name(f)}List = db.query(${Name(f.getXRefEntity())}.class).in("${f.getXRefLabelString()}",new ArrayList<Object>(${name(f)}Keymap.keySet())).find();
			for(${Name(f.XRefEntity)} xref :  ${name(f)}List)
			{
				${name(f)}Keymap.put(xref.get${Name(f.getXRefLabelString())}(), xref.get${Name(f.getXRefField())}());
			}
			
			</#if></#list>
			//update remaining objects with foreign keys
			for(${Name(entity)} o:  ${name(entity)}List)
			{
				<#list allFields(entity) as f><#if f.type == 'xref'  && f.getXRefLabelString() != f.getXRefField()>
				if(o.get${Name(f)}Label() != null) 
				{
					if(${name(f)}Keymap.get(o.get${Name(f)}Label()) == null) throw new Exception("Cannot find ${Name(f.getXRefEntity())} for ${name(f)}_${name(f.getXRefLabelString())} '"+o.get${Name(f)}Label()+"'");
					o.set${Name(f)}(${name(f)}Keymap.get(o.get${Name(f)}Label()));
				}
				</#if></#list>								
			}
			
			</#if>
			//add remaining objects to the database
			db.add(${name(entity)}List);
			
			//output count
			total.set(total.get() + ${name(entity)}List.size());
			logger.info("imported "+total.get()+" ${name(entity)} from "+${name(entity)}File);
			return "Imported " + total.get() + " ${name(entity)} items.";
		}
		else{
			return "File not found.";
		}	 
	}
</#if></#list>	

	public static class ImportResult
	{
		
		List<String> progressLog;
		Map<String,String> messages;
		String errorItem;
		
		public ImportResult(){
			progressLog = new ArrayList<String>();
			messages = new HashMap<String,String>();
			errorItem = "no error found";
		}

		public List<String> getProgressLog() {
			return progressLog;
		}

		public void setProgressLog(List<String> progressLog) {
			this.progressLog = progressLog;
		}

		public Map<String, String> getMessages() {
			return messages;
		}

		public void setMessages(Map<String, String> messages) {
			this.messages = messages;
		}

		public String getErrorItem() {
			return errorItem;
		}

		public void setErrorItem(String errorItem) {
			this.errorItem = errorItem;
		}
		
	}
}