<#-- we expect $matrix from the java generator program -->
<#include "GeneratorHelper.ftl">

<#--#####################################################################-->
<#--                                                                   ##-->
<#--         START OF THE OUTPUT                                       ##-->
<#--                                                                   ##-->
<#--#####################################################################-->
# File:        ${model.getName()}/R/${file}
# Copyright:   GBIC 2000-${year?c}, all rights reserved
# Date:        ${date}
#
# generator:   ${generator} ${version}
#
# This file provides action methods to MOLGENIS for matrix ${Name(matrix)}
#
# THIS FILE HAS BEEN GENERATED, PLEASE DO NOT EDIT!
#

<#assign row_entity = matrix.getRowEntity()/>
<#assign col_entity = matrix.getColEntity()/>
<#assign container_entity = matrix.getContainerEntity()/>
<#assign content_entity = matrix.getContentEntity()/>
<#assign container_skey_fields = key_fields(skeys(container_entity))>
<#assign row_skey_fields = key_fields(skeys(row_entity))>
<#assign col_skey_fields = key_fields(skeys(col_entity))>

add.${name(matrix)} <- function(.data_matrix, <#list allFields(container_entity) as field>${name(field)}=NULL <#if field_has_next>, </#if></#list>, .usesession=T)
{    
    #use session parameters
	<#list container_skey_fields as f><#if f.type == "xref">
    <#assign session_var = ".MOLGENIS$session." + name(f.getXRefEntity()) + "."+ name(f.getXRefField())>
    if(.usesession && is.null(${name(f)}) && !is.null(${session_var}))    
    {
        ${name(f)} = ${session_var}
        cat("Using ${name(f)}='",${session_var},"' from session (usession = T).\n", sep="") 
    } 
    </#if></#list>    

    #add container entity '${name(matrix.container)}' 
    container_arguments <-  mget(ls(),environment())
                                       
    #get the ids of the rows
    cat('checking rownames and columnames with database: \n')
    #todo: trim the spaces of rownames, otherwise comparison fails...
    #todo: add the missing parts for this query [or check that this never happens]
    row_labels <- find.${name(row_entity)}( <#list row_skey_fields as f><#if f.type != "xref">${name(f)}=rownames(.data_matrix)<#else>${name(f)}=${name(f)}</#if><#if f_has_next>, </#if></#list> )   
    missing_row_labels <- setdiff( rownames(.data_matrix), row_labels$<#list row_skey_fields as f><#if f_index == 0>${name(f)}</#if></#list>)
    if(length(missing_row_labels)>0)
    {
        stop("not all ${name(row_entity)} are known in database, missing rows: ", toString(missing_row_labels),". Use add.${name(row_entity)}() to correct.")
    }

    #get the ids of the columns 
    #todo: trim the spaces of rownames, otherwise comparison fails...
    #todo: add the missing parts for this query [or check that this never happens]
    col_labels <- find.${name(col_entity)}( <#list col_skey_fields as f><#if f.type != "xref">${name(f)}=colnames(.data_matrix)<#else>${name(f)}=${name(f)}</#if><#if f_has_next>, </#if></#list> )   
    missing_col_labels <- setdiff( colnames(.data_matrix), col_labels$<#list col_skey_fields as f><#if f_index == 0>${name(f)}</#if></#list>)
    if(length(missing_col_labels)>0)
    {
        stop("not all ${name(col_entity)} are known in database, missing cols: ", toString(missing_col_labels),". Use add.${name(col_entity)}() to correct.")
    }
    
    cat('Moving matrix to database:\n') 
    container <- add.${name(container_entity)}(container_arguments)
    if( !is.logical(container) )
    {           
        #todo: make more efficient?
        #convert the matrix to a RCV table
        content_rows <- cbind(
        	row_name=rownames(.data_matrix), 
        	col_name=rep(colnames(.data_matrix), each=nrow(.data_matrix)), 
        	${name(matrix.content)}=c(.data_matrix))
        #add the row id by mapping the skey to pkey (i.e. row_name to row_id) 
        content_rows <- merge(content_rows, data.frame(${name(matrix.row)}=row_labels$${name(pkeyname(row_entity))}, row_name=row_labels$${name(skeys(row_entity)?first.fields?first)}), sort=F)
        #add the col id by mapping the skey to pkey (i.e. col_name to col_id) 
        content_rows <- merge(content_rows, data.frame(${name(matrix.col)}=col_labels$${name(pkeyname(col_entity))}, col_name=col_labels$${name(skeys(col_entity)?first.fields?first)}), sort=F)
        #add the container id column         
        content_rows <- cbind(content_rows, ${name(matrix.container)} = container$${name(pkeyname(container_entity))})    

        #unset columns we don't need to upload
        content_rows$row_name = NULL
        content_rows$col_name = NULL
        
        result <- add.${name(content_entity)}( content_rows )        
        if( is.logical(result) )
        {
            cat('addition failed, rolling back\n')
            remove.${name(container_entity)}(container)
            return(FALSE)
        }
        cat('Upload of ${name(matrix)} matrix successful\n')
        return(TRUE)
    }
}

#todo: move this logic to servlet?
<#assign container_pkey = name(pkeyname(container_entity))/>
get.${name(matrix)}<-function(${container_pkey}=NULL<#list container_skey_fields as f>, ${name(f)}=NULL</#list>)
{
    #map each skey to pkey
    if(is.null(${container_pkey}))
    {
<#list skeys(container_entity) as skey>
		if(<#list key_fields(skey) as f>!is.null(${name(f)})<#if f_has_next> &&</#if></#list>)
		{
        	container <- find.${name(container_entity)}(<#list key_fields(skey) as f>${name(f)}=${name(f)}<#if f_has_next>, </#if></#list>)
        	if( length(container) == 0 )
            	stop('${name(matrix)} for ${name(container_entity)}(',<#list key_fields(skey) as f>'${name(f)}=', ${name(f)}<#if f_has_next>, </#if></#list>,') not found')
        	${container_pkey} <- container$${container_pkey}			
		}
</#list>
    }   
    if(is.null(${container_pkey})) stop('you need to provide {${container_pkey}} or <#list skeys(container_entity) as skey>{<#list key_fields(skey) as f>${name(f)}<#if f_has_next> and </#if></#list>}<#if skey_has_next> or </#if></#list>') 

    #download textdata
    content_rows <- find.${name(content_entity)}(${name(matrix.container)} = ${container_pkey})
    rnames <- unique(content_rows$${name(matrix.row)}_name)
    cnames <- unique(content_rows$${name(matrix.col)}_name)
  
    #todo: move to reusable asset 
    starttime=Sys.time()       
    if( length(content_rows)>0)
    {        
        result  <- matrix(nrow=length(rnames), ncol=length(cnames), dimnames=list(rnames,cnames))
        for(i in 1:nrow(content_rows))
        {
            result[content_rows$${name(matrix.row)}_name[i],content_rows$${name(matrix.col)}_name[i]]<-content_rows$${name(matrix.content)}[i]
        }
        cat("Transformed data into matrix(nrow=",nrow(result),",ncol=",ncol(result),") in ", format(difftime(Sys.time(),starttime, units="sec"), digits=3),"\n", sep="")
        return(result)
    }
    return(NULL)
}

#find by pkey or skey container and remove
remove.${name(matrix)} <- function(${container_pkey}=NULL<#list container_skey_fields as f>, ${name(f)}=NULL</#list>)
{     
    container <- find.${name(container_entity)}(${container_pkey}<#list container_skey_fields as f>, ${name(f)}=${name(f)}</#list>)
    if(is.null(container)) stop('cannot find ${name(container_entity)}. Search using {${container_pkey}} or <#list skeys(container_entity) as skey>{<#list key_fields(skey) as f>${name(f)}<#if f_has_next> and </#if></#list>}<#if skey_has_next> or </#if></#list>')
    content_rows <- find.${name(content_entity)}(${name(matrix.container)} = ${container_pkey})
     
    #todo: make more efficient
    remove.${name(content_entity)}(content_rows)
    remove.${name(container_entity)}(container)    
}